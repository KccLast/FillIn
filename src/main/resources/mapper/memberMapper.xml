<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kcc.fillin.member.dao.MemberMapper">


    <resultMap type="MemberResponse" id="memberResultMap">
        <result column="postal_code" property="postalCode"/>
    </resultMap>

    <!-- 회원 정보 수정 (비밀번호) -->
    <update id="updatePassword" parameterType="ResetPasswordDTO">
        UPDATE member
        SET password = #{newPassword}  <!-- 새 비밀번호로 업데이트 -->
        WHERE username = #{email} <!-- 이메일이 일치하는 사용자 -->
    </update>


    <!-- 이메일로 회원 중복 체크 -->
    <select id="emailExists" parameterType="String" resultType="int">
        SELECT count(*)
        FROM member
        WHERE username = #{username}
    </select>

    <!--이메일 찾기 검증-->
    <select id="getMemberByEmail" parameterType="String">
        SELECT seq,username, password, name, birth, postal_code, address
        FROM member
        WHERE username = #{username}
    </select>

     <!-- MemberDTO의 매핑 정보 -->
<!--
    <resultMap id="memberResultMap" type="com.kcc.fillin.member.dto.MemberDTO">
        <result property="username" column="username"/>
        <result property="name" column="name"/>
        <result property="birth" column="birth"/>
        <result property="status" column="status"/>
        <result property="postalCode" column="postal_code"/>
        <result property="address" column="address"/>
    </resultMap>
-->

    <!-- 이름과 전화번호로 이메일 찾기 -->
    <select id="findEmailByNameAndPhone" resultType="string">
        SELECT username
        FROM member
        WHERE name = #{name}
          AND REPLACE(phone, '-', '') = REPLACE(#{phone}, '-', '')
    </select>

    <!-- 이름, 전화번호, 이메일로 비밀번호 찾기 -->
    <select id = "existsByNamePhoneAndEmail" resultType="int">
        SELECT COUNT(*)
        FROM member
        WHERE name = #{name}
        AND username = #{email}
    </select>

    <!-- 회원 등록 -->
    <insert id="insertMember" parameterType="MemberDTO">
        INSERT INTO MEMBER
        (seq, username, name, password, phone, birth, address, postal_code, cc_seq, created_at, updated_at,role)
        VALUES (member_seq.nextval, #{username}, #{name}, #{password}, #{phone}, #{birth}, #{address}, #{postalCode},
                #{ccSeq},
                sysdate, sysdate, 'ROLE_USER')

    </insert>


</mapper>