<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kcc.fillin.statistic.dao.StatisticMapper">

    <select id="selectTargetCount">
        SELECT target_people AS targetCount
        FROM survey
        WHERE seq = #{surveySeq}
    </select>

    <select id="selectParticipantsCount">
        SELECT COUNT(DISTINCT a.participant_seq) AS participantsCount
        FROM question q,
             answer a
        WHERE q.survey_seq = #{surveySeq}
          AND q.seq = a.question_seq
    </select>

    <select id="selectHits" resultType="HitsDTO">
        SELECT occur_date                     AS occurDate,
               COALESCE(total_views, 0)       AS totalViews,    -- 조회수
               COALESCE(total_starts, 0)      AS startCount,    -- 시작수
               COALESCE(participant_count, 0) AS completedCount -- 완료수
        FROM (
                 -- survey_log에서 조회수와 시작수를 날짜별로 집계
--                  SELECT TRUNC(occur_date)                          AS occur_date,
                 SELECT TRUNC(occur_date)                            AS occur_date,
                        SUM(CASE WHEN cc_seq = 22 THEN 1 ELSE 0 END) AS total_views, -- 조회수
                        SUM(CASE WHEN cc_seq = 23 THEN 1 ELSE 0 END) AS total_starts -- 시작수
                 FROM survey_log
                 WHERE survey_seq = #{surveySeq}
                 GROUP BY TRUNC(occur_date)) survey_log_data
                 LEFT JOIN
             (
                 -- answer에서 날짜별 응답자 수 집계
                 SELECT TRUNC(a.answer_date)              AS answer_date,
                        COUNT(DISTINCT a.participant_seq) AS participant_count
                 FROM answer a
                          JOIN
                      question q ON a.question_seq = q.seq
                 WHERE q.survey_seq = #{surveySeq}
                 GROUP BY TRUNC(a.answer_date)) answer_data
             ON survey_log_data.occur_date = answer_data.answer_date
        ORDER BY occur_date
    </select>

    <resultMap id="quantitativeResponse" type="QuantitativeResponse">
        <id property="questionOrder" column="order_num"/>
        <result property="questionName" column="name"/>

        <collection property="questionItems" ofType="QuantitativeQuestionItemDTO">
            <result property="itemContent" column="contents"/>
            <result property="itemRatio" column="itemRatio"/>
        </collection>
    </resultMap>

    <select id="selectQuantitativeList" resultMap="quantitativeResponse">
        SELECT q.order_num,
               q.name,
               a.contents,
               ROUND((COUNT(a.seq) * 100.0 / SUM(COUNT(a.seq)) OVER (PARTITION BY a.question_seq)), 2) AS itemRatio
        FROM (SELECT q.*
              FROM question q
                       JOIN common_code c
                            ON q.cc_seq = c.seq
              WHERE parent_seq = 3) q
                 JOIN
             answer a ON q.seq = a.question_seq
        WHERE q.survey_seq = #{surveySeq}
        GROUP BY q.order_num, q.name, a.contents, a.question_seq
    </select>

    <resultMap id="qualitativeResponse" type="QualitativeResponse">
        <id property="questionOrder" column="order_num"/>
        <result property="questionName" column="name"/>

        <collection property="answerList" ofType="QualitativeAnswerDTO">
            <result property="answerDate" column="answer_date"/>
            <result property="answerContent" column="contents"/>
        </collection>
    </resultMap>

    <select id="selectQualitativeList" resultMap="qualitativeResponse">
        SELECT q.order_num, q.name, a.answer_date, a.contents
        FROM question q
                 JOIN common_code c ON q.cc_seq = c.seq
                 JOIN answer a ON q.seq = a.question_seq
        WHERE c.parent_seq = 4
          AND q.survey_seq = #{surveyId}
    </select>

</mapper>